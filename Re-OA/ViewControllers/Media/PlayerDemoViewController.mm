////  PlayerDemoViewController.m//  PlayerDemo////  Created by apple on 11-4-2.//  Copyright __MyCompanyName__ 2011. All rights reserved.//#import "PlayerDemoViewController.h"#import "hcnetsdk.h"#import "HikDec.h"#import <Foundation/Foundation.h>#include <stdio.h>#include <ifaddrs.h>#include <sys/socket.h>#include <sys/poll.h>#include <net/if.h>#include <map>#import "URL.h"#import "JianKongWebAPI.h"#import "AlertHelper.h"@implementation PlayerDemoViewController@synthesize	m_deviceIpField;@synthesize	m_devicePortField;@synthesize	m_uerNameField;@synthesize	m_passwordField;@synthesize	m_deviceIpFieldstr;@synthesize	m_devicePortFieldstr;@synthesize	m_uerNameFieldstr;@synthesize	m_passwordFieldstr;@synthesize m_playView;@synthesize m_playButton;@synthesize m_playbackButton;@synthesize m_loginButton;@synthesize m_getcfgButton;@synthesize m_captureButton;@synthesize m_recordButton;@synthesize m_soundButton;@synthesize m_ptzButton;@synthesize m_presetButton;@synthesize m_nPreviewPort;@synthesize m_nPlaybackPort;@synthesize m_fp;@synthesize m_playThreadID;@synthesize m_bThreadRun;@synthesize m_lUserID;@synthesize m_lRealPlayID;@synthesize m_lPlaybackID;@synthesize m_bPreview;@synthesize m_bRecord;@synthesize m_bSoundOn;@synthesize m_bPTZL;@synthesize m_bPreset1;@synthesize m_tongdao;int g_nChan = 0;// preview callback functionvoid fRealDataCallBack_V30(LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize, void* pUser){    PlayerDemoViewController *pDemo =(__bridge PlayerDemoViewController*)pUser;    switch (dwDataType)    {        case NET_DVR_SYSHEAD:            if (dwBufSize > 0 && pDemo->m_nPreviewPort != -1)            {                if (!PlayM4_SetStreamOpenMode(pDemo->m_nPreviewPort, STREAME_REALTIME))                {                    break;                }                if (!PlayM4_OpenStream(pDemo->m_nPreviewPort, pBuffer , dwBufSize, 2*1024*1024))                {                    break;                }                pDemo->m_bPreview = 1;                [pDemo startPlayer];            }            break;        case NET_DVR_STD_AUDIODATA:        case NET_DVR_STD_VIDEODATA:        case NET_DVR_STREAMDATA:            if (dwBufSize > 0 && pDemo->m_nPreviewPort != -1)            {                if(!PlayM4_InputData(pDemo->m_nPreviewPort, pBuffer, dwBufSize))                {                    break;                }            }            break;        default:            break;    }}//playback callback functionvoid fPlayDataCallBack_V40(LONG lPlayHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,void *pUser){    PlayerDemoViewController *pDemo = (__bridge PlayerDemoViewController*)pUser;    int i = 0;    switch (dwDataType)    {        case NET_DVR_SYSHEAD:            if (dwBufSize > 0 && pDemo->m_nPlaybackPort != -1)            {                if(PlayM4_GetPort(&pDemo->m_nPlaybackPort) != 1)                {                   // NSLog(@"PlayM4_GetPort failed:%d",  NET_DVR_GetLastError());                }                if (!PlayM4_SetStreamOpenMode(pDemo->m_nPlaybackPort, STREAME_FILE))                {                    break;                }                if (!PlayM4_OpenStream(pDemo->m_nPlaybackPort, pBuffer , dwBufSize, 2*1024*1024))                {                    break;                }                pDemo->m_bPreview = 0;                [pDemo startPlayer];            }            break;        case NET_DVR_STD_AUDIODATA:        case NET_DVR_STD_VIDEODATA:        case NET_DVR_STREAMDATA:            if (dwBufSize > 0 && pDemo->m_nPlaybackPort != -1)            {                for(i = 0; i < 2000; i++)                {                    if(PlayM4_InputData(pDemo->m_nPlaybackPort, pBuffer, dwBufSize))                    {                        break;                    }                    sleep(2);                }            }            break;        default:            break;    }}//preset button click up-(IBAction)presetBtnClicked:(id)sender{   // NSLog(@"presetBtnClicked");        if (m_lUserID < 0) {      //  NSLog(@"Please logon a device first!");        return;    }        if (m_bPreset1 == false)    {        if (!NET_DVR_PTZPreset_Other(m_lUserID, g_nChan, GOTO_PRESET, 1))        {           // NSLog(@"GOTO_PRESET[1] failed with[%d]", NET_DVR_GetLastError());        }        else        {           // NSLog(@"GOTO_PRESET[1] succ");        }        m_bPreset1 = true;        [m_presetButton setTitle:@"Preset(2)" forState:UIControlStateNormal];    }    else    {        if (!NET_DVR_PTZPreset_Other(m_lUserID, g_nChan, GOTO_PRESET, 2))        {           // NSLog(@"GOTO_PRESET[2] failed with[%d]", NET_DVR_GetLastError());        }        else        {           // NSLog(@"GOTO_PRESET[2] succ");        }        [m_presetButton setTitle:@"Preset(1)" forState:UIControlStateNormal];        m_bPreset1 = false;    }}//ptz button click up-(IBAction)ptzBtnClickedUp:(id)sender{   // NSLog(@"ptzBtnClickedUp");    if (m_bPTZL == true) {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_nChan, PAN_LEFT, 1))        {          //  NSLog(@"stop PAN_LEFT failed with[%d]", NET_DVR_GetLastError());        }        else        {           // NSLog(@"stop PAN_LEFT succ");        }        [m_ptzButton setTitle:@"PTZ(R)" forState:UIControlStateNormal];    }    else    {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_nChan, PAN_RIGHT, 1))        {           // NSLog(@"stop PAN_RIGHT failed with[%d]", NET_DVR_GetLastError());        }        else        {           // NSLog(@"stop PAN_RIGHT succ");        }        [m_ptzButton setTitle:@"PTZ(L)" forState:UIControlStateNormal];    }}//ptz button click-(IBAction)ptzBtnClicked:(id)sender{    //NSLog(@"ptzBtnClicked");    if (m_lUserID < 0) {       // NSLog(@"Please logon a device first!");        return;    }    if (m_bPTZL == false)    {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_nChan, PAN_LEFT, 0))        {           // NSLog(@"start PAN_LEFT failed with[%d]", NET_DVR_GetLastError());        }        else        {           // NSLog(@"start PAN_LEFT succ");        }        m_bPTZL = true;    }    else    {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_nChan, PAN_RIGHT, 0))        {           // NSLog(@"start PAN_RIGHT failed with[%d]", NET_DVR_GetLastError());        }        else        {          //  NSLog(@"start PAN_RIGHT succ");        }        m_bPTZL = false;    }}//sound button click-(IBAction)soundBtnClicked:(id)sender{    //NSLog(@"soundBtnClicked");    if (m_lRealPlayID < 0) {       // NSLog(@"Please start realplay first!");        return;    }        if (m_bSoundOn == false) {        PlayM4_PlaySound(m_nPreviewPort);        m_bSoundOn = true;    }    else    {        PlayM4_StopSound();        m_bSoundOn = false;    }}// record button click-(IBAction)recordBtnClicked:(id)sender{   // NSLog(@"recordBtnClicked");    if (m_bRecord == false)    {        if (m_lRealPlayID < 0) {           // NSLog(@"Please start realplay first!");            return;        }                NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);        NSString *documentsDirectory = [paths objectAtIndex:0];        char szFileName[256] = {0};        NSString* date;        NSDateFormatter* formatter = [[NSDateFormatter alloc]init];        [formatter setDateFormat:@"YYYY-MM-dd-hh-mm-ss"];        date = [formatter stringFromDate:[NSDate date]];        sprintf(szFileName, "%s/%s.mp4", (char*)documentsDirectory.UTF8String, (char*)date.UTF8String);        if (!NET_DVR_SaveRealData(m_lRealPlayID, szFileName)) {          //  NSLog(@"NET_DVR_SaveRealData failed with[%d]", NET_DVR_GetLastError());            return;        }       // NSLog(@"NET_DVR_SaveRealData succ [%s]", szFileName);                m_bRecord = true;        [m_recordButton setTitle:@"Stop Record" forState:UIControlStateNormal];    }    else    {        NET_DVR_StopSaveRealData(m_lRealPlayID);        m_bRecord = false;        [m_recordButton setTitle:@"Start Record" forState:UIControlStateNormal];    }}// capture button click-(IBAction)captureBtnClicked:(id)sender{    //NSLog(@"captureBtnClicked");    if (m_lRealPlayID < 0) {       // NSLog(@"Please start realplay first!");        return;    }    int nHeight = 0;    int nWidth = 0;    if (!PlayM4_GetPictureSize(m_nPreviewPort, &nWidth, &nHeight)){      //  NSLog(@"PlayM4_GetPictureSize fialed with[%d]", PlayM4_GetLastError(m_nPreviewPort));        return;    }    //2cif -> 4cif    if (nWidth == 704 && (nHeight == 288 || nHeight == 240)) {        nHeight <<= 1;    }        int nSize = 5 * nWidth * nHeight;    char *pBuf = new char[nSize];    memset(pBuf, 0, nSize);    unsigned int  dwRet = 0;    if (!PlayM4_GetBMP(m_nPreviewPort, (unsigned char*)pBuf, nSize, &dwRet))    {        delete []pBuf;        pBuf = NULL;       // NSLog(@"PlayM4_GetBMP failed with[%d]", PlayM4_GetLastError(m_nPreviewPort));        return;    }        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);    NSString *documentsDirectory = [paths objectAtIndex:0];    char szFileName[256] = {0};    NSString* date;    NSDateFormatter* formatter = [[NSDateFormatter alloc]init];    [formatter setDateFormat:@"YYYY-MM-dd hh:mm:ss"];    date = [formatter stringFromDate:[NSDate date]];        sprintf(szFileName, "%s/%s.bmp", (char*)documentsDirectory.UTF8String, (char*)date.UTF8String);        FILE *pFile = NULL;    pFile = fopen(szFileName, "wb");    fwrite(pBuf, dwRet, 1, pFile);    fclose(pFile);        delete []pBuf;    pBuf = NULL;       // NSLog(@"capture bmp succ[%s]", szFileName);    return;}// preview button Click-(IBAction) playerBtnClicked:(id)sender{   // NSLog(@"liveStreamBtnClicked");        if (m_lRealPlayID == -1)    {        if(m_lUserID == -1)        {           // NSLog(@"Please login on the device first!");            return;        }                [self startPlay];                // request stream        NET_DVR_CLIENTINFO ClientInfo = {0};                ClientInfo.lChannel = g_nChan;      //  NSLog(@"-------WWWWW %d",ClientInfo.lChannel);        ClientInfo.lLinkMode = (1<<31);             //   NSLog(@"-------WWWWW %ld",m_lUserID);        m_lRealPlayID = NET_DVR_RealPlay_V30(m_lUserID, &ClientInfo, fRealDataCallBack_V30, (__bridge void*)self);        if (m_lRealPlayID == -1)        {           // NSLog(@"NET_DVR_RealPlay_V30 failed:%d",  NET_DVR_GetLastError());            [AlertHelper hideAllHUDsForView:self.view];            UIAlertView *alert = [[UIAlertView alloc]                                  initWithTitle:kWarningTitle                                  message:kRealPlayFailMsg                                  delegate:nil                                  cancelButtonTitle:kWarningConfirmButton                                  otherButtonTitles:nil];            [alert show];            // [alert release];            [self stopPlay];            return;        }        [AlertHelper hideAllHUDsForView:self.view];        [m_playButton setTitle:@"Stop Preview" forState:UIControlStateNormal];    }    else    {    [AlertHelper hideAllHUDsForView:self.view];        [self stopPlay];        [m_playButton setTitle:@"Start Preview" forState:UIControlStateNormal];    }}//config button click-(IBAction) getcfgBtnClicked:(id)sender{   // NSLog(@"getcfgBtnClicked");        if(m_lUserID == -1)    {       // NSLog(@"Please logon a device first!");        return;    }        NET_DVR_COMPRESSIONCFG_V30 struCompress = {0};    DWORD dwRet = 0;    if (!NET_DVR_GetDVRConfig(m_lUserID, NET_DVR_GET_COMPRESSCFG_V30, g_nChan, &struCompress, sizeof(struCompress), &dwRet))    {       // NSLog(@"NET_DVR_GET_COMPRESSCFG_V30 failed with[%d]", NET_DVR_GetLastError());    }    else    {       // NSLog(@"NET_DVR_GET_COMPRESSCFG_V30 succ");    }    //set substream resolution to cif    struCompress.struNetPara.byResolution = 1;    if (!NET_DVR_SetDVRConfig(m_lUserID, NET_DVR_SET_COMPRESSCFG_V30, g_nChan, &struCompress, sizeof(struCompress)))    {      //  NSLog(@"NET_DVR_SET_COMPRESSCFG_V30 failed with[%d]", NET_DVR_GetLastError());    }    else    {       // NSLog(@"NET_DVR_SET_COMPRESSCFG_V30 succ");    }}//init player for preview- (void) startPlay{    if(PlayM4_GetPort(&m_nPreviewPort) != 1)    {       // NSLog(@"PlayM4_GetPort failed:%d",  NET_DVR_GetLastError());    }    return;}//start player- (void) startPlayer{    [self performSelectorOnMainThread:@selector(playerPlay)                           withObject:nil                        waitUntilDone:NO];}//play,the function PlayM4_Play must be called in main thread- (void) playerPlay{    int nRet = 0;    if(m_bPreview)    {        nRet =PlayM4_Play(m_nPreviewPort,(__bridge void*) m_playView);    }    else    {        nRet = PlayM4_Play(m_nPlaybackPort, (__bridge void*)m_playView);      //  NSLog(@"AAAQSSASDX*********  %d",PlayM4_GetPlayedTime(m_nPlaybackPort)) ;    }    if (nRet != 1)    {      //  NSLog(@"PlayM4_Play fail");        [self stopPlay];        return;    }}//init player for palyback- (void) startPlayback{    if(PlayM4_GetPort(&m_nPlaybackPort) != 1)    {                [self playBackErr];       NSLog(@"PlayM4_GetPort failed:%d",  NET_DVR_GetLastError());    }    return;}-(void)playBackErr{    UIAlertView *alert = [[UIAlertView alloc]                          initWithTitle:@"提示"                          message:@"回放失败"                          delegate:nil                          cancelButtonTitle:@"确定"                          otherButtonTitles:nil];    [alert show];    [self.timer invalidate];}-(void)playbackWithStartTime:(NSArray *)startTimeArr AnEndTime:(NSArray *)endTimeArr{    if (m_lPlaybackID == -1)    {        if(m_lUserID == -1)        {            NSLog(@"Please login on the device first!");            return;        }                [self startPlayback];        NET_DVR_TIME struStartTime = {0};        NET_DVR_TIME struEndTime = {0};                struStartTime.dwYear = [startTimeArr[0] intValue];        struStartTime.dwMonth = [startTimeArr[1] intValue];        struStartTime.dwDay = [startTimeArr[2] intValue];        struStartTime.dwHour =[startTimeArr[3] intValue];        struStartTime.dwMinute =[startTimeArr[4] intValue];        struStartTime.dwSecond =[startTimeArr[5] intValue];                    struEndTime.dwYear = [endTimeArr[0] intValue];        struEndTime.dwMonth = [endTimeArr[1] intValue];        struEndTime.dwDay = [endTimeArr[2] intValue];        struEndTime.dwHour = [endTimeArr[3] intValue];        struEndTime.dwMinute =[endTimeArr[4] intValue];        struEndTime.dwSecond = [endTimeArr[5] intValue];                m_lPlaybackID = NET_DVR_PlayBackByTime(m_lUserID, g_nChan, &struStartTime, &struEndTime, NULL);                if (m_lPlaybackID == -1)        {            // NSLog(@"NET_DVR_PlayBackByTime failed:%d",  NET_DVR_GetLastError());//            UIAlertView *alert = [[UIAlertView alloc]//                                  initWithTitle:kWarningTitle//                                  message:kRealPlayFailMsg//                                  delegate:nil//                                  cancelButtonTitle:kWarningConfirmButton//                                  otherButtonTitles:nil];//            [alert show];            //[alert release];            [self playBackErr];            [self stopPlayback];            return;        }                if (!NET_DVR_SetPlayDataCallBack_V40(m_lPlaybackID, fPlayDataCallBack_V40 , (__bridge void*)self))        {            //NSLog(@"NET_DVR_SetPlayDataCallBack_V40 failed:%d",  NET_DVR_GetLastError());            [self playBackErr];            [self stopPlayback];            return;        }                if (!NET_DVR_PlayBackControl_V40(m_lPlaybackID, NET_DVR_PLAYSTART, NULL, 0, NULL, NULL))        {          //  NSLog(@"NET_DVR_PlayBackControl_V40 failed:%d",  NET_DVR_GetLastError());            [self playBackErr];            [self stopPlayback];            return;        }        self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(handTimer:) userInfo:nil repeats:YES];        [m_playbackButton setTitle:@"取消回放" forState:UIControlStateNormal];    }    else    {        [self stopPlayback];        [m_playbackButton setTitle:@"视频回放" forState:UIControlStateNormal];    }}- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{        if (1==buttonIndex) {        self.playAndPauseBtn.selected  = NO;        _slider.enabled=YES;        _view_progressView.hidden=NO;            NSString * time = [theAlert textFieldAtIndex:0].text;            _la_st.text =@"00:00:00";            stim=time;            NSArray  *dateArr=[self subTimeWithTime:time];                    NSString * eTime = [theAlert textFieldAtIndex:1].text;                    endTiArr=[self subTimeWithTime:eTime];                    [self.timer invalidate];            self.slider.value=0;       //     self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(handTimer:) userInfo:nil repeats:YES];                NSDateFormatter *dateFormatter=[[NSDateFormatter alloc] init];        [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm"];        NSDate *date1=[dateFormatter dateFromString:time];        NSDate *date2=[dateFormatter dateFromString:eTime];                timeInt=[date2 timeIntervalSinceDate:date1];        int hours = ((int)timeInt)/3600;                int minute =((int)timeInt)%3600/60;        if (minute<10) {              _la_et.text=[NSString stringWithFormat:@"%d:0%d:00",hours,minute];        }                else        {           _la_et.text=[NSString stringWithFormat:@"%d:%d:00",hours,minute];        }                   [self playbackWithStartTime:dateArr AnEndTime:endTiArr];            }}- (void)handTimer:(NSTimer *)timer{        secos++;   // NSLog(@"QQQQ %d",secos);    self.slider.value=secos/timeInt;    _la_st.text=[self formateTime:secos];        if (secos==(int)timeInt) {        [self.timer invalidate];    }           }-(NSString *)formateTime:(int)_time{    int num = (int)_time;    int hou=num/3600;    int min = num%3600/60;    int sec = num%3600 % 60;    NSString  *strMin;    NSString *secStr;    if (min<=9) {        strMin=[NSString stringWithFormat:@"0%d",min];    }    else    {        strMin=[NSString stringWithFormat:@"%d",min];    }    if (sec<=9) {        secStr=[NSString stringWithFormat:@"0%d",sec];    }    else    {        secStr=[NSString stringWithFormat:@"%d",sec];            }    return [NSString stringWithFormat:@"%d:%@:%@",hou,strMin, secStr];}-(NSArray *)subTimeWithTime:(NSString *)time{       NSString *subStr1=@" ";    NSRange range = [time rangeOfString:subStr1];//匹配得到的下标    NSString *   dateStr=@"";    NSString *   timeStr=@"";        if (range.location!=NSNotFound)    {        //2016-05-23        dateStr = [time substringToIndex:range.location];//截取范围类的字符串        NSMutableArray  *pArr=[NSMutableArray arrayWithArray:[ dateStr componentsSeparatedByString:@"-"]];                 //11:04        timeStr=[time substringFromIndex:range.location+range.length];                NSMutableArray  *Arr=[NSMutableArray arrayWithArray:[ timeStr componentsSeparatedByString:@":"]];        [pArr addObject:Arr[0]];        [pArr addObject:Arr[1]];        if ( Arr.count==2) {            [pArr addObject:@"0"];        }        else        {           [pArr addObject:Arr[2]];        }        return pArr;                    }    else    {        return  nil;    }        }// playback button click-(IBAction) playbackBtnClicked:(id)sender{        if ([m_playbackButton.titleLabel.text isEqualToString:@"视频回放"]) {        theAlert = [[UIAlertView alloc] initWithTitle:@"提示"                                              message:@"选择回放时间"                                             delegate:self                                    cancelButtonTitle:@"取消"                                    otherButtonTitles:@"确定",nil];           theAlert.alertViewStyle=UIAlertViewStyleLoginAndPasswordInput;        UITextField *tf = [theAlert textFieldAtIndex:0];        tf.placeholder=@"输入起始时间";        tf.inputView = dateView1;                UITextField *endTime=[theAlert textFieldAtIndex:1];        [endTime setSecureTextEntry:NO];        endTime.inputView = dateView2;        endTime.placeholder=@"输入终止时间";        [theAlert show];    }    else    {      //  if ( PlayM4_Pause(m_nPlaybackPort,0)==1) {              [self stopPlayback];      //  }              [self.timer invalidate];        secos=0;        _slider.value=0;                _view_progressView.hidden=YES;        [m_playbackButton setTitle:@"视频回放" forState:UIControlStateNormal];        } }-(void)login{      BOOL bRet = NET_DVR_Init();    if (!bRet)    {        // NSLog(@"NET_DVR_Init failed");    }        NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];    const char* pDir = [documentPath UTF8String];    NET_DVR_SetLogToFile(3, (char*)pDir, true);    if (m_lUserID == -1)    {                        NSString * iP = m_deviceIpFieldstr;        NSString * port = m_devicePortFieldstr;        NSString * usrName = m_uerNameFieldstr;        NSString * password = m_passwordFieldstr;                        DeviceInfo *deviceInfo = [[DeviceInfo alloc] init];        deviceInfo.chDeviceAddr = iP;        deviceInfo.nDevicePort = [port integerValue];        deviceInfo.chLoginName = usrName;        deviceInfo.chPassWord = password;                // check valid        if (![self validateValue:deviceInfo])        {            return;        }                // device login        NET_DVR_DEVICEINFO_V30 logindeviceInfo = {0};                // encode type        NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);        m_lUserID = NET_DVR_Login_V30((char*)[deviceInfo.chDeviceAddr UTF8String],                                      deviceInfo.nDevicePort,                                      (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc],                                      (char*)[deviceInfo.chPassWord UTF8String],                                      &logindeviceInfo);                //  printf("iP:%s\n", (char*)[deviceInfo.chDeviceAddr UTF8String]);        // printf("Port:%d\n", deviceInfo.nDevicePort);        // printf("UsrName:%s\n", (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc]);        // printf("Password:%s\n", (char*)[deviceInfo.chPassWord UTF8String]);                // login on failed        if (m_lUserID == -1)        {            UIAlertView *alert = [[UIAlertView alloc]                                  initWithTitle:kWarningTitle                                  message:kLoginDeviceFailMsg                                  delegate:nil                                  cancelButtonTitle:kWarningConfirmButton                                  otherButtonTitles:nil];            [alert show];            return;        }                NET_DVR_IPPARACFG_V40 struIPPara = {0};        DWORD dwRet = 0;        NET_DVR_GetDVRConfig(m_lUserID, NET_DVR_GET_IPPARACFG_V40, 0, &struIPPara, sizeof(struIPPara), &dwRet);                        if (struIPPara.dwAChanNum > 0)        {            g_nChan = 1;        }        else        {                                    g_nChan = struIPPara.dwStartDChan+[m_tongdao intValue]-1;                                            }                if (g_nChan <= 0) {                                    g_nChan =   [m_tongdao intValue];                                            }            }    else    {        NET_DVR_Logout(m_lUserID);        NET_DVR_Cleanup();        m_lUserID = -1;        //   [m_loginButton setTitle:@"Logon" forState:UIControlStateNormal];    }    }// login button click-(IBAction) loginBtnClicked:(id)sender{   // NSLog(@"loginBtnClicked");    // init    BOOL bRet = NET_DVR_Init();    if (!bRet)    {       // NSLog(@"NET_DVR_Init failed");    }      NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];    const char* pDir = [documentPath UTF8String];    NET_DVR_SetLogToFile(3, (char*)pDir, true);    if (m_lUserID == -1)    {          // NSLog(@"_______ %@",ipArr);               for (int i=0; i<[ipArr count]; i++) {                                     // NSString * iP = m_deviceIpFieldstr;                     NSString * iP = ipArr[i][@"ip"];                    NSString * port = m_devicePortFieldstr;                    NSString * usrName = m_uerNameFieldstr;                    NSString * password = m_passwordFieldstr;                                                                                DeviceInfo *deviceInfo = [[DeviceInfo alloc] init];                    deviceInfo.chDeviceAddr = iP;                    deviceInfo.nDevicePort = [port integerValue];                    deviceInfo.chLoginName = usrName;                    deviceInfo.chPassWord = password;                                        // check valid                    if (![self validateValue:deviceInfo])                    {                        return;                    }                                        // device login                    NET_DVR_DEVICEINFO_V30 logindeviceInfo = {0};                                        // encode type                    NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);                    m_lUserID = NET_DVR_Login_V30((char*)[deviceInfo.chDeviceAddr UTF8String],                                                  deviceInfo.nDevicePort,                                                  (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc],                                                  (char*)[deviceInfo.chPassWord UTF8String],                                                  &logindeviceInfo);                                                            // login on failed                    if (m_lUserID == -1)                    {                                            if (numm==ipArr.count) {                            [AlertHelper hideAllHUDsForView:self.view];                            UIAlertView *alert = [[UIAlertView alloc]                                                  initWithTitle:kWarningTitle                                                  message:kLoginDeviceFailMsg                                                  delegate:nil                                                  cancelButtonTitle:kWarningConfirmButton                                                  otherButtonTitles:nil];                            [alert show];                            //[alert release];                           break;                        }                        else                        {                            numm ++;                                                }                    }                                        else                    {                        NET_DVR_IPPARACFG_V40 struIPPara = {0};                        DWORD dwRet = 0;                        NET_DVR_GetDVRConfig(m_lUserID, NET_DVR_GET_IPPARACFG_V40, 0, &struIPPara, sizeof(struIPPara), &dwRet);                                                                        if (struIPPara.dwAChanNum > 0)                        {                            g_nChan = 1;                        }                        else                        {                            g_nChan = struIPPara.dwStartDChan+[m_tongdao intValue]-1;                                                }                                                if (g_nChan <= 0) {                                                        g_nChan =   [m_tongdao intValue];                                                    }                        [AlertHelper hideAllHUDsForView:self.view];                         break;                    }                           }              //  [m_loginButton setTitle:@"Logout" forState:UIControlStateNormal];    }    else    {        NET_DVR_Logout(m_lUserID);        NET_DVR_Cleanup();        m_lUserID = -1;       // [m_loginButton setTitle:@"Logon" forState:UIControlStateNormal];    }}//stop preview-(void) stopPlay{    if (m_lRealPlayID != -1)    {        NET_DVR_StopRealPlay(m_lRealPlayID);        m_lRealPlayID = -1;    }        if(m_nPreviewPort >= 0)    {        if (!PlayM4_Stop(m_nPreviewPort))        {           // NSLog(@"PlayM4_Stop failed");        }        if(!PlayM4_CloseStream(m_nPreviewPort))        {           // NSLog(@"PlayM4_CloseStream failed");        }        if (!PlayM4_FreePort(m_nPreviewPort))        {           // NSLog(@"PlayM4_FreePort failed");        }        m_nPreviewPort = -1;    }}//stop playback- (void) stopPlayback{    if (m_lPlaybackID != -1)    {        NET_DVR_StopPlayBack(m_lPlaybackID);        m_lPlaybackID = -1;    }        if(m_nPlaybackPort >= 0)    {        if (!PlayM4_Stop(m_nPlaybackPort))        {          //  NSLog(@"PlayM4_Stop failed");        }        if(!PlayM4_CloseStream(m_nPlaybackPort))        {          //  NSLog(@"PlayM4_CloseStream failed");        }        if (!PlayM4_FreePort(m_nPlaybackPort))        {           // NSLog(@"PlayM4_FreePort failed");        }        m_nPlaybackPort = -1;    }}// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad{    [self.navigationItem setTitle:@"监控摄像"];        secos=0;    numm=0;    m_lUserID = -1;    m_lRealPlayID = -1;    m_lPlaybackID = -1;    m_nPreviewPort = -1;    m_nPlaybackPort = -1;    m_bRecord = false;    m_bSoundOn = false;    m_bPTZL = false;    m_bPreset1 = false;    //[self starPlay];        // hide keybord    dateView1 = [ZhiBanChooseDateView  instanceChooseDateView];    dateView1.chooseDateDelegate=self;    dateView1.dateId=@"1";  //  _tf_time.inputView=dateView1;    dateView2 = [ZhiBanChooseDateView  instanceChooseDateView];    dateView2.chooseDateDelegate=self;    dateView2.dateId=@"2";    [[NSNotificationCenter defaultCenter] addObserver:self                                             selector:@selector(keyboardWillHide:)                                                 name:UIKeyboardWillHideNotification                                               object:nil];            [ _slider setThumbImage:[self OriginImage:[UIImage imageNamed:@"yishenhe.png"] scaleToSize:CGSizeMake(30, 30)] forState:UIControlStateNormal];         [super viewDidLoad];                }-(void)chooseTheDate:(NSString *)dateStr withId:(NSString *)dateid{        if ([dateid isEqualToString:@"1"]) {        UITextField *tf = [theAlert textFieldAtIndex:0];        tf.text=dateStr;        [tf  resignFirstResponder];    }    else    {        UITextField *tf = [theAlert textFieldAtIndex:1];        tf.text=dateStr;        [tf  resignFirstResponder];        }           }- (void)didReceiveMemoryWarning{    // Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];        // Release any cached data, images, etc that aren't in use.}-(void)viewWillAppear:(BOOL)animated{    //隐藏navigationController  //  [self.navigationController setNavigationBarHidden:YES animated:NO];       // 隐藏状态栏   // [[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationSlide];}- (IBAction)clickBack:(id)sender {       //状态栏旋转//    [[UIApplication sharedApplication] setStatusBarOrientation:UIInterfaceOrientationPortrait];//    [self.navigationController popToRootViewControllerAnimated:YES];//     [self.navigationController popViewControllerAnimated:YES];}-(void)viewDidAppear:(BOOL)animated{    if ([kDomain isEqualToString:kDomainn]) {        [AlertHelper singleMBHUDShow:@"获取数据中..." ForView:self.view];        [JianKongWebAPI requestIPsuccess:^(NSArray *arr){            [AlertHelper hideAllHUDsForView:self.view ];            ipArr=[arr copy];            [self loginBtnClicked:self.m_loginButton];            [self playerBtnClicked:self.m_playButton];        } fail:^(){            [AlertHelper hideAllHUDsForView:self.view];            [AlertHelper singleMBHUDShow:@"网络请求数据失败" ForView:self.view AndDelayHid:1];        }];            }    else    {        [self login];        [self playerBtnClicked:self.m_playButton];        }}-(void)viewWillDisappear:(BOOL)animated{       if ( m_nPlaybackPort!=-1) {         PlayM4_Pause(m_nPlaybackPort,0);    }      if (m_lRealPlayID != -1)    {        NET_DVR_StopRealPlay(m_lRealPlayID);        m_lRealPlayID = -1;    }        if(m_lPlaybackID != -1)    {        NET_DVR_StopPlayBack(m_lPlaybackID);        m_lPlaybackID = -1;    }            if(m_lUserID != -1)    {        NET_DVR_Logout(m_lUserID);        NET_DVR_Cleanup();        m_lUserID = -1;    }  //  [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationSlide];    //显示navigationController  //  [self.navigationController setNavigationBarHidden:NO animated:YES];}- (void)viewDidUnload{        if (m_lRealPlayID != -1)    {        NET_DVR_StopRealPlay(m_lRealPlayID);        m_lRealPlayID = -1;    }        if(m_lPlaybackID != -1)    {        NET_DVR_StopPlayBack(m_lPlaybackID);        m_lPlaybackID = -1;    }        if(m_lUserID != -1)    {        NET_DVR_Logout(m_lUserID);        NET_DVR_Cleanup();        m_lUserID = -1;    }}/******************************************************************************* Function:			validateValue Description:		check valid Input:				deviceInfo － device info Output: Return:			true-valid;false-invalid *******************************************************************************/- (bool) validateValue:(DeviceInfo *)deviceInfo{    // check device address    if ([deviceInfo.chDeviceAddr compare:@""] == NSOrderedSame)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDeviceAddrEmptyMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        // check length of device address    if ([deviceInfo.chDeviceAddr lengthOfBytesUsingEncoding:NSUTF8StringEncoding] > 32)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDeviceAddrTooLongerMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        // whether valid ip    if (![self isValidIP:deviceInfo.chDeviceAddr])    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDeviceAddrInvalidMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        // check port    if (deviceInfo.nDevicePort == 0)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDevicePortEmptyMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        // check username    if ([deviceInfo.chLoginName compare:@""] == NSOrderedSame)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDeviceUserNameEmptyMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        // check username length    if ([deviceInfo.chLoginName lengthOfBytesUsingEncoding:NSUTF8StringEncoding] > 64)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDeviceUserNameTooLongerMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        // check password length    if ([deviceInfo.chPassWord lengthOfBytesUsingEncoding:NSUTF8StringEncoding] > 16)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kDevicePasswordTooLongerMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        //[alert release];                return false;    }        return true;}#pragma mark -#pragma mark textField UITextField Delegate methods/******************************************************************************* Function:			textFieldEditingDidBegin Description:		enter edit box,hide picture,controller up Input:				sender － button down Output: Return: *******************************************************************************/- (IBAction) textFieldEditingDidBegin:(id)sender{    [UIView beginAnimations:@"login.animation" context:nil];        [UIView commitAnimations];}/******************************************************************************* Function:			textFieldEditingDidEndOnExit Description:		exit edit box,hide picture,controller focus change Input:				sender － bu`tton down Output: Return: *******************************************************************************/- (IBAction) textFieldEditingDidEndOnExit:(id)sender{    // foucs on username edit box,click done,focus on password edit box    if (sender == m_deviceIpField)    {        [m_devicePortField becomeFirstResponder];    }        else if (sender == m_devicePortField)    {        [m_uerNameField becomeFirstResponder];    }        else if (sender == m_uerNameField)    {        [m_passwordField becomeFirstResponder];    }        // if focus on password edit box,click done,revert GUI    else if (sender == m_passwordField)    {        [UIView beginAnimations:@"login.animation" context:nil];    }    else    {        // do nothing    }}/******************************************************************************* Function:			isValidIP Description:		check ip Input:				ipStr － IP address Output: Return:			true-valid,false-invalid *******************************************************************************/- (bool)isValidIP:(NSString *)ipStr{    const char* ip = [ipStr cStringUsingEncoding:NSUTF8StringEncoding];        // check invalid char    int temp = 0;    for (int i = 0; i < strlen(ip); i++)    {        // <1 or > 9,invalid char        temp = (int)ip[i];        if ((temp >= 48 && temp <= 57) || temp == 46)        {            continue;        }        else        {            return false;        }    }        int n;    unsigned int a, b, c, d;    if(strlen(ip) <= 15 &&       sscanf(ip, "%3u.%3u.%3u.%3u%n", &a, &b, &c, &d, &n) >= 4       && n == static_cast<int>(strlen(ip)))    {        return (a > 0 && a <= 255 && b <= 255 && c <= 255 && d <= 255 && d > 0) || (a == 0 && b== 0 && c == 0 && d == 0);    }    return false;}/******************************************************************************* Function:			keyboardWillHide Description:		exit edit box,hide picture,controller focus change Input:				note － keyboard hide Output:			 Return:			 *******************************************************************************/- (IBAction)keyboardWillHide:(NSNotification *)note{    [UIView beginAnimations:@"login.animation" context:nil];    [UIView commitAnimations];}// hide copy and paste button- (BOOL)canPerformAction:(SEL)action withSender:(id)sender{    [UIMenuController sharedMenuController].menuVisible = NO;    return YES;}- (void)dealloc {    if (m_playView != nil)    {        ///[m_playView release];        m_playView = nil;    }        if (m_playThreadID != nil)    {        //[m_playThreadID release];        m_playThreadID = nil;    }        //[super dealloc];}- (IBAction)valueChange:(id)sender {    int num=  self.slider.value *timeInt;    _la_st.text =[self formateTime:num];    }- (IBAction)positionChanged:(id)sender {     secos=0;     [self.timer invalidate];    [self stopPlayback];     int num=  self.slider.value *timeInt;     secos=num;        NSString *str=[NSString stringWithFormat:@"%@:00",stim];        NSDateFormatter *dateFormatter=[[NSDateFormatter alloc] init];    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];    //hh 12小时制 HH 24小时制    NSDate *date1=[dateFormatter dateFromString:str];        NSDate *date=[NSDate dateWithTimeInterval:secos sinceDate:date1];    NSString *nowtimeStr = [dateFormatter stringFromDate:date];        NSArray *stArr=[self subTimeWithTime:nowtimeStr];     _la_st.text =[self formateTime:num]; //    self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(handTimer:) userInfo:nil repeats:YES];       [self playbackWithStartTime:stArr AnEndTime:endTiArr];         }- (IBAction)playAndPauseBtnPress:(id)sender {    self.playAndPauseBtn.selected = !self.playAndPauseBtn.selected;    [self.timer invalidate];    if (self.playAndPauseBtn.selected)    {        PlayM4_Pause(m_nPlaybackPort, 1);        _slider.enabled=NO;        m_playbackButton.enabled=NO;          }      //播放    else    {        m_playbackButton.enabled=YES;        _slider.enabled=YES;        PlayM4_Pause(m_nPlaybackPort,0);        //通过定时器改变时间标签和播放进度        self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(handTimer:) userInfo:nil repeats:YES];    }       }//设置滑块的大小-(UIImage*) OriginImage:(UIImage*)image scaleToSize:(CGSize)size{        UIGraphicsBeginImageContext(size);//size为CGSize类型，即你所需要的图片尺寸        [image drawInRect:CGRectMake(0,0, size.width, size.height)];        UIImage* scaledImage =UIGraphicsGetImageFromCurrentImageContext();        UIGraphicsEndImageContext();        return scaledImage;    }@end